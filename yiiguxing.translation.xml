<application>
  <component name="AppStorage">
    <histories>
      <item value="range" />
      <item value="truncation" />
      <item value="入口信息" />
      <item value="游览方式" />
      <item value="批量" />
      <item value="不允许" />
      <item value="允许" />
      <item value="Comment" />
      <item value="recommend" />
      <item value="推荐" />
      <item value="recomment" />
      <item value="resolve symbol" />
      <item value="raw Password" />
      <item value="encoded Password" />
      <item value="Signals places where an unchecked warning is issued by the compiler, for example" />
      <item value="Unsatisfied" />
      <item value="reference" />
      <item value="circular" />
      <item value="unresolvable" />
      <item value="creation" />
      <item value="currently" />
      <item value="Signals places where an unchecked warning is issued by the compiler, for example:" />
      <item value="Internal Authentication Service Exception" />
      <item value="verifier Key" />
      <item value="verifier" />
      <item value="Performs authentication with the same contract as" />
      <item value="The identity of the principal being authenticated. In the case of an authentication" />
      <item value="The identity of the principal being authenticated. In the case of an authentication * request with username and password, this would be the username. Callers are * expected to populate the principal for an authentication request." />
      <item value="Principal" />
      <item value="Construct an OAuth 2 authentication. Since some grant types don't require user authentication, the user * authentication may be null." />
      <item value="credentials" />
      <item value="不足" />
      <item value="subtract" />
      <item value="remainder" />
      <item value="减" />
      <item value="Returns a {@code BigDecimal} whose value is {@code (this / * divisor)}, and whose preferred scale is {@code (this.scale() - * divisor.scale())}; if the exact quotient cannot be * represented (because it has a non-terminating decimal * expansion) an {@code ArithmeticException} is thrown." />
      <item value="divide" />
      <item value="multiply" />
      <item value="Reports conditions that become redundant as they are completely covered by a subsequent condition. For example, in the value != -1 &amp;&amp; value &gt; 0 condition, the first part is redundant: if it's false, then the second part is also false. Or in a condition like obj != null &amp;&amp; obj instanceof String, the null-check is redundant as instanceof operator implies non-nullity." />
      <item value="the raw password to encode and match" />
      <item value="the encoded password from storage to compare with" />
      <item value="Verify the encoded password obtained from storage matches the submitted raw * password after it too is encoded. Returns true if the passwords match, false if * they do not. The stored password itself is never decoded." />
      <item value="租户端" />
      <item value="generate Presigned Url" />
      <item value="Credentials Container" />
      <item value="erase Credentials After Authentication" />
      <item value="attempt" />
      <item value="The list of {@link AuthenticationProvider}s will be successively tried until an" />
      <item value="Attempts to authenticate the passed {@link Authentication} object." />
      <item value="Attempts to authenticate the passed {@link Authentication} object. * &lt;p&gt; * The list of {@link AuthenticationProvider}s will be successively tried until an * &lt;code&gt;AuthenticationProvider&lt;/code&gt; indicates it is capable of authenticating the * type of &lt;code&gt;Authentication&lt;/code&gt; object passed. Authentication will then be * attempted with that &lt;code&gt;AuthenticationProvider&lt;/code&gt;. * &lt;p&gt; * If more than one &lt;code&gt;AuthenticationProvider&lt;/code&gt; supports the passed * &lt;code&gt;Authentication&lt;/code&gt; object, the first one able to successfully * authenticate the &lt;code&gt;Authentication&lt;/code&gt; object determines the * &lt;code&gt;result&lt;/code&gt;, overriding any possible &lt;code&gt;AuthenticationException&lt;/code&gt; * thrown by earlier supporting &lt;code&gt;AuthenticationProvider&lt;/code&gt;s. * On successful authentication, no subsequent &lt;code&gt;AuthenticationProvider&lt;/code&gt;s * will be tried. * If authentication was not successful by any supporting" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="408" />
        <entry key="ENGLISH" value="409" />
        <entry key="BASQUE" value="2" />
        <entry key="POLISH" value="2" />
        <entry key="DANISH" value="1" />
        <entry key="FRISIAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="SPANISH" value="2" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>